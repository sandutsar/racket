#!/bin/sh
#|
cd "`dirname \"$0\"`"
src="../bc/configure.ac"
tgt="../bc/configure"
if [ ! -e "$src" ]; then echo "abort: did not find $src"; exit 1; fi
echo "Creating $tgt from $src"
autoconf "$src" | racket "$0" > "$tgt"
chmod +x "$tgt"
src="../rktio/configure.ac"
tgt="../rktio/configure"
echo "Creating $tgt from $src"
autoconf "$src" > "$tgt"
chmod +x "$tgt"
src="../cs/c/configure.ac"
tgt="../cs/c/configure"
echo "Creating $tgt from $src"
autoconf "$src"  | racket "$0" > "$tgt"
chmod +x "$tgt"
exit 0
|#
#lang racket/base

;; When autoconf produces `configure', it includes many
;;  options that do not apply to Racket.  We want to
;;  get rid of them, so that `configure --help' produces
;;  valid information.
;; In addition, we want none of the feature-selection flags
;;  (such as --enable-mac64) to be passed to sub-configures,
;;  so we adjust the script to strip them away.
;; Finally, we want to support `CFLAGS+=...` to add to `CFLAGS`
;;  instead of replacing the default arguments.

(define skip-rxs
  (map (lambda (s)
	 (regexp (format "^  --~a=DIR" s)))
       '(sbindir 
	 libexecdir 
	 sharedstatedir
	 localstatedir
	 oldincludedir
	 runstatedir
	 infodir
         htmldir
         ;; Note: any arguments converted this way need to be excluded in "rktio_keep.m4"
         ;;  dvidir - converted to "collectsdir"
         ;;  pdfdir - converted to "pkgsdir"
         psdir
         ;;  localedir - converted to "appsdir"
        )))

;; Keep "#!" line first:
(displayln (read-line))

(define (insert-filter_add)
 (newline)
 (call-with-input-file
  "filter_add.sh"
  (lambda (i)
   (let loop ()
    (let ([l (read-line i)])
     (unless (eof-object? l)
      (displayln l)
      (loop))))))
 (newline))

(let loop ()
  (let ([l (read-line)])
    (unless (eof-object? l)
      (cond
       [(regexp-match #rx"for ac_option" l)
        (insert-filter_add)
        (displayln l)
        (loop)]
       [(ormap (lambda (rx)
                 (regexp-match rx l))
               skip-rxs)
        ;; Skip
        (loop)]
       [(regexp-match #rx"dvidir" l)
        ;; Hack: take over "dvidir" for "collectsdir":
        (cond
         [(equal? l "dvidir='${docdir}'")
          (displayln "collectsdir='${exec_prefix}/share/${PACKAGE}/collects'")]
         [(equal? l "  --dvidir=DIR            dvi documentation [DOCDIR]")
          (displayln "  --collectsdir=DIR       base collections [EPREFIX/share/PACKAGE/collects]")]
         [else
          (displayln (regexp-replace* "pdf" (regexp-replace* #rx"dvi" l "collects") "apps"))])
        (loop)]
       [(regexp-match #rx"pdfdir" l)
        ;; Hack: take over "pdfdir" for "pkgsdir":
        (cond
         [(equal? l "pdfdir='${docdir}'")
          (displayln "pkgsdir='${datadir}/${PACKAGE}/pkgs'")]
         [(equal? l "  --pdfdir=DIR            pdf documentation [DOCDIR]")
          (displayln "  --pkgsdir=DIR           installed pkgs [EPREFIX/share/PACKAGE/pkgs]")]
         [else
          (displayln (regexp-replace* #rx"pdf" l "pkgs"))])
        (loop)]
       [(regexp-match #rx"localedir" l)
        ;; Hack: take over "localedir" for "appsdir":
        (cond
         [(equal? l "localedir='${datarootdir}/locale'")
          (displayln "appsdir='${exec_prefix}/share/applications'")]
         [(equal? l "  --localedir=DIR         locale-dependent data [DATAROOTDIR/locale]")
          (displayln "  --appsdir=DIR           .desktop files [EPREFIX/share/applications]")]
         [else
          (displayln (regexp-replace* #rx"locale" l "apps"))])
        (loop)]
       [(regexp-match #rx"Usage: .*[[]VAR=VALUE[]][.][.][.]" l)
        (displayln (string-append l " [VAR+=VALUE]..."))
        (loop)]
       [(regexp-match #rx"See below for descriptions of some of the useful variables" l)
        (displayln l)
        (displayln "Use += with CFLAGS, CPPFLAGS, LDFLAGS, or LIBS to add to the variable.")
        (loop)]
       [else
        ;; Copy
        (displayln l)
        (loop)]))))
